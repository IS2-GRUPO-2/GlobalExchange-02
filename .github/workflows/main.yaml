name: Backend Tests

# Cuándo debe ejecutarse el flujo de trabajo.
on:
  push:
    # Se ejecuta en push a cualquier rama
    branches: [ "*" ]
  pull_request:
    # Se ejecuta en pull requests hacia cualquier rama
    branches: [ "*" ]

jobs:
  test:
    name: Correr Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Clonar repositorio
        # Clona tu repositorio para que el flujo de trabajo pueda acceder al código y archivos
        uses: actions/checkout@v4
        
      - name: Crear archivo .env a partir de secrets
        run: |
          cat > .env <<'EOF'
          # Variables de entorno para el backend
          POSTGRES_NAME=${{ secrets.POSTGRES_NAME || 'globalexchange_test' }}
          POSTGRES_USER=${{ secrets.POSTGRES_USER || 'postgres' }}
          POSTGRES_PASS=${{ secrets.POSTGRES_PASS || 'admin' }}
          POSTGRES_HOST=db
          POSTGRES_PORT=5432
          DJANGO_DEBUG=${{ secrets.DJANGO_DEBUG || 'True' }}
          HOST_ALLOW_ORIGINS=${{ secrets.HOST_ALLOW_ORIGINS || '*' }}
          EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER || '' }}
          EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD || '' }}
          
          # Variables de entorno para la base de datos (compose)
          POSTGRES_DB=${{ secrets.POSTGRES_NAME || 'globalexchange_test' }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASS || 'admin' }}
          EOF
          
      - name: Modificar comando del backend para pruebas
        run: |
          # Crear un override temporal para cambiar solo el comando del backend
          cat > docker-compose.override.yml <<'EOF'
          services:
            backend:
              command: >
                bash -c "python manage.py migrate --noinput && 
                         python -m pytest --verbose --tb=short"
          EOF
          
      - name: Ejecutar pruebas con Docker Compose
        # Usa tu docker-compose actual, solo ejecutando los servicios backend y db
        # El archivo override cambia el comando del backend para ejecutar pruebas
        run: |
          docker compose up backend db \
            --build \
            --exit-code-from backend \
            --abort-on-container-exit
            
      - name: Limpiar contenedores de prueba
        # Limpia los contenedores y volúmenes después de las pruebas
        if: always()
        run: |
          docker compose -f docker-compose.test.yml down --volumes --remove-orphans || true
          docker system prune -f || true
