name: Docker

on:
  push:
    branches: ["main"]
    tags: [ 'v*.*.*' ]
    
env:
  REGISTRY: ghcr.io
  IMAGE_NAME_FRONTEND: "frontend"
  IMAGE_NAME_BACKEND: "backend"
  IMAGE_NAME_SIMULADOR: "simulador"


jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install cosign
        uses: sigstore/cosign-installer@v3.5.0
        with:
          cosign-release: 'v2.2.4'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.0.0

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Crear archivo .env antes de cualquier build
      - name: Crear archivo .env
        run: |
          echo "${{ secrets.DEV_ENV }}" > .env

      # Build frontend dist ANTES de usar los archivos
      - name: Compilar el frontend
        run: |
          docker compose run --rm frontend npm run build

      # Generar archivos estáticos del backend
      - name: Generar archivos estáticos del backend
        run: |
          docker compose run --rm --user root backend sh -c "
            mkdir -p /app/static /app/media &&
            chown -R django:django /app/static /app/media &&
            chmod 755 /app/static /app/media &&
            su django -s /bin/sh -c 'python manage.py collectstatic --noinput'
          "

      # Metadata Backend
      - name: Extract Docker metadata (backend)
        id: meta-backend
        uses: docker/metadata-action@v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME_BACKEND }}
          tags: |
            type=sha
            type=raw,value=latest

      # Metadata Frontend
      - name: Extract Docker metadata (frontend)
        id: meta-frontend
        uses: docker/metadata-action@v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME_FRONTEND }}
          tags: |
            type=sha
            type=raw,value=latest
      
      # Metadata simulador
      - name: Extract Docker metadata (simulador)
        id: meta-simulador
        uses: docker/metadata-action@v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME_SIMULADOR }}
          tags: |
            type=sha
            type=raw,value=latest

      # Build backend
      - name: Build and push backend
        id: build-backend
        uses: docker/build-push-action@v5.0.0
        with:
          context: ./backend
          file: ./backend/dockerfile
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Build frontend (Nginx) - ahora con el contexto completo
      - name: Build and push frontend
        id: build-frontend
        uses: docker/build-push-action@v5.0.0
        with:
          context: .  # Cambiar contexto a la raíz del proyecto
          file: ./nginx/dockerfile
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Build simulador
      - name: Build and push simulador
        id: build-simulador
        uses: docker/build-push-action@v5.0.0
        with:
          context: ./pago-api
          file: ./pago-api/dockerfile
          push: true
          tags: ${{ steps.meta-simulador.outputs.tags }}
          labels: ${{ steps.meta-simulador.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
        
      # Firmar backend
      - name: Sign backend image
        env:
          TAGS: ${{ steps.meta-backend.outputs.tags }}
          DIGEST: ${{ steps.build-backend.outputs.digest }}
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}

      # Firmar frontend
      - name: Sign frontend image
        env:
          TAGS: ${{ steps.meta-frontend.outputs.tags }}
          DIGEST: ${{ steps.build-frontend.outputs.digest }}
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}
      
      # Firmar simulador
      - name: Sign simulador image
        env:
          TAGS: ${{ steps.meta-simulador.outputs.tags }}
          DIGEST: ${{ steps.build-simulador.outputs.digest }}
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}

      
      # Crear archivo docker-compose.production.yml
      - name: Copiar docker-compose.production.yml al VPS
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: "docker-compose.prod.yml"
          target: "/srv/globalexchange/docker-compose.yml"

      # SSH al vps
      - name: Deploy en VPS
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            cd /srv/globalexchange
            echo "${{ secrets.PROD_ENV}}" > .env
            echo "${{ secrets.GHCR_PAT}}" | docker login ghcr.io -u "${{ secrets.GHCR_USER}}" --password-stdin
            docker compose down -v --rmi all --remove-orphans
            docker volume prune -f
            docker compose pull
            docker compose up -d

      
